<button type="button" class="btn btn-primary btn-fw">Primary</button>
                      <button type="button" class="btn btn-secondary btn-fw">Secondary</button>
                      <button type="button" class="btn btn-success btn-fw">Success</button>
                      <button type="button" class="btn btn-danger btn-fw">Danger</button>
                      <button type="button" class="btn btn-warning btn-fw">Warning</button>
                      <button type="button" class="btn btn-info btn-fw">Info</button>
                      <button type="button" class="btn btn-light btn-fw">Light</button>
                      <button type="button" class="btn btn-dark btn-fw">Dark</button>
                      <button type="button" class="btn btn-link btn-fw">Link</button>



                      //////////////////////////////////
                      {% extends "admin_dash/dash.html" %}
{% load static %}

{% block content %}
<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header">
            <h3 class="page-title">Product Management</h3>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Forms</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Add Product</li>
                </ol>
            </nav>
        </div>
        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Add Product</h4>
                    <p class="card-description">Fill in the details below</p>
                    <form class="forms-sample" action="{% url 'add_product' %}" method="post" enctype="multipart/form-data">
                        {% csrf_token %}

                        <div class="form-group">
                            <label for="id_name">Name</label>
                            {{ form.name }}
                        </div>
                        <div class="form-group">
                            <label for="id_price">Price</label>
                            {{ form.price }}
                        </div>
                        <div class="form-group">
                            <label for="id_quantity">Quantity</label>
                            {{ form.quantity }}
                        </div>
                        <div class="form-group">
                            <label for="id_stock">Stock</label>
                            {{ form.stock }}
                        </div>
                        <div class="form-group">
                            <label for="id_status">Status</label>
                            {{ form.status }}
                        </div>
                        <div class="form-group">
                            <label for="id_categories">Category</label>
                            {{ form.categories }}
                        </div>
                        <div class="form-group">
                            <label for="id_brand">Brand</label>
                            {{ form.brand }}
                        </div>
                        <div class="form-group">
                            <label for="id_filter_price">Filter Price</label>
                            {{ form.filter_price }}
                        </div>
                        <div class="form-group">
                            <label for="id_image">Image</label>
                            {{ form.image }}
                        </div>
                        <div class="form-group">
                            <label for="id_description">Description</label>
                            {{ form.description }}
                        </div>
                        <button type="submit" class="btn btn-primary mr-2">Submit</button>
                        <a href="{% url 'product_management' %}" class="btn btn-dark">Cancel</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}
////////////////////////////////////////////////////////////////////////////////////


To set up your HTML templates in Django, you've already started by creating a template for adding a product. It seems like you're using template inheritance, which is a good practice. Here are some guidelines for organizing and using your HTML templates effectively:

1. **Base Template (admin_dash/dash.html)**:
   - Your base template should include the common structure that is consistent across multiple pages of your website. This may include the header, navigation menu, and footer.
   - Define blocks in your base template that can be overridden in child templates. For example, you might have a `{% block content %}` in your base template to allow child templates to insert their specific content.

2. **Child Templates**:
   - Child templates (like your "add_product.html") should extend the base template. Use `{% extends "admin_dash/dash.html" %}` at the top of your child template to inherit the common structure.
   - Override the content block to provide the specific content for that page. For example:
     ```html
     {% block content %}
       <!-- Your specific content goes here -->
     {% endblock %}
     ```

3. **Include Static Files**:
   - Use `{% load static %}` at the top of your templates to load the static files (CSS, JavaScript, images) you need.
   - Link to your static files using the `{% static 'path-to-your-file' %}` template tag. For example:
     ```html
     <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">
     ```

4. **Form Rendering**:
   - You've done well by creating form fields in your child template. Ensure that you are rendering the form fields correctly using the form template tags. For example:
     ```html
     <div class="form-group">
       <label for="{{ form.name.id_for_label }}">Name</label>
       {{ form.name }}
     </div>
     ```

5. **Error Handling**:
   - To display form validation errors, use the `{{ form.field.errors }}` template tag within the form fields. For example:
     ```html
     <div class="form-group">
       <label for="{{ form.name.id_for_label }}">Name</label>
       {{ form.name }}
       {{ form.name.errors }}
     </div>
     ```

6. **Flash Messages**:
   - You're using `messages.error` in your view to display an error message. Ensure you have a placeholder in your template to display these messages. For example:
     ```html
     {% if messages %}
       <ul class="messages">
         {% for message in messages %}
           <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
         {% endfor %}
       </ul>
     {% endif %}
     ```

By following these guidelines, you can create well-organized and maintainable HTML templates in your Django project. It separates the common layout from specific content, making your code more modular and easier to manage.




///////////////////////////////////////////
It looks like you're trying to create a form for adding products to your database using Django. Your view function seems mostly correct, but there are a couple of issues in your code.

1. You need to use parentheses to create an instance of the `ProductForm` class:

   Replace:
   ```python
   form = ProductForm
   ```

   With:
   ```python
   form = ProductForm()
   ```

   This initializes an instance of the form that you can use for rendering the form and processing the submission.

2. Make sure you return the form when it's not valid, so that any errors are displayed to the user:

   Replace:
   ```python
   return redirect('add_product')
   ```

   With:
   ```python
   return render(request, 'admin_dash/add_product.html', {'form': form})
   ```

   This way, if the form is not valid, it will be redisplayed with error messages.

Here's the updated view function:

```python
def add_product(request):
    form = ProductForm()
    if request.method == 'POST':
        form = ProductForm(request.POST)
        if form.is_valid():
            product_name = form.cleaned_data.get('name')
            if Product.objects.filter(name=product_name).exists():
                messages.error(request, 'Product already exists!')
            else:
                form.save()
                return redirect('product_management')
    
    all_categories = Category.objects.all()
    brands = Brand.objects.all()
    filter_price = Filter_price.objects.all()
    
    context = {
        'all_categories': all_categories,
        'brands': brands,
        'filter_price': filter_price,
        'form': form,  # Include the form in the context
    }
    
    return render(request, 'admin_dash/add_product.html', context)
```

Now, the view will display the form with error messages if it's not valid and save the product if it is valid. Additionally, the form is included in the context to render it in the template.


.................................................................................
{% extends "admin_dash/dash.html" %}
{% load static %}

{% block content %}
<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header">
            <h3 class="page-title">Category Management</h3>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Forms</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Form elements</li>
                </ol>
            </nav>
        </div>

        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Add Product</h4>
                    <form class="forms-sample" action="{% url 'add_product' %}" method="post" enctype="multipart/form-data">
                        {% csrf_token %}

                        <div class="form-group">
                            <label for="id_name">Name</label>
                            {{ form.name }}
                        </div>

                        <div class="form-group">
                            <label for="id_price">Price</label>
                            {{ form.price }}
                        </div>

                        <div class="form-group">
                            <label for="id_quantity">Quantity</label>
                            {{ form.quantity }}
                        </div>

                        <div class="form-group">
                            <label for="id_stock">Stock</label>
                            {{ form.stock }}
                        </div>

                        <div class="form-group">
                            <label for="id_status">Status</label>
                            {{ form.status }}
                        </div>

                        <div class="form-group">
                            <label for="id_categories">Category</label>
                            {{ form.categories }}
                        </div>

                        <div class="form-group">
                            <label for="id_brand">Brand</label>
                            {{ form.brand }}
                        </div>

                        <div class="form-group">
                            <label for="id_filter_price">Filter Price</label>
                            {{ form.filter_price }}
                        </div>

                        <div class="form-group">
                            <label for="id_image">Image</label>
                            {{ form.image }}
                        </div>

                        <button type="submit" class="btn btn-primary">Submit</button>
                        <a href="{% url 'product_management' %}" class="btn btn-dark">Cancel</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock content %}
???????????????????????????????????????
from django.shortcuts import render, get_object_or_404, redirect
from .models import Product
from .forms import ProductForm

def edit_product(request, product_id):
    product = get_object_or_404(Product, id=product_id)

    if request.method == 'POST':
        form = ProductForm(request.POST, request.FILES, instance=product)
        if form.is_valid():
            form.save()
            return redirect('product_management')
    else:
        form = ProductForm(instance=product)

    context = {
        'form': form,
        'product': product,
    }

    return render(request, 'admin_dash/edit_product.html', context)
    ????????????????????????????????????????????????
    <form class="forms-sample" method="post" action="{% url 'edit_product' product.id %}" enctype="multipart/form-data">
    {% csrf_token %}

    <div class="form-group">
        <label for="id_name">Name</label>
        <input type="text" name="name" value="{{ product.name }}" class="form-control" id="id_name" placeholder="Product name">
    </div>

    <div class="form-group">
        <label for="id_description">Description</label>
        <textarea name="description" class="form-control" id="id_description" rows="4">{{ product.description }}</textarea>
    </div>

    <div class="form-group">
        <label for="id_price">Price</label>
        <input type="text" name="price" value="{{ product.price }}" class="form-control" id="id_price" placeholder="Price">
    </div>

    <div class="form-group">
        <label for="id_stock">Stock</label>
        <select name="stock" class="form-control" id="id_stock">
            <option value="IN STOCK" {% if product.stock == "IN STOCK" %}selected{% endif %}>IN STOCK</option>
            <option value="OUT OF STOCK" {% if product.stock == "OUT OF STOCK" %}selected{% endif %}>OUT OF STOCK</option>
        </select>
    </div>

    <div class="form-group">
        <label for="id_status">Status</label>
        <select name="status" class="form-control" id="id_status">
            <option value="Publich" {% if product.status == "Publich" %}selected{% endif %}>Publich</option>
            <option value="Draft" {% if product.status == "Draft" %}selected{% endif %}>Draft</option>
        </select>
    </div>

    <div class="form-group">
        <label for="id_quantity">Quantity</label>
        <input type="text" name="quantity" value="{{ product.quantity }}" class="form-control" id="id_quantity" placeholder="Quantity">
    </div>

    <!-- Image Field -->
    <div class="form-group">
        <label for="id_image">Image</label>
        <input type="file" name="image" class="file-upload-default" id="id_image">
        <div class="input-group col-xs-12">
            <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image">
            <span class="input-group-append">
                <button class="file-upload-browse btn btn-primary" type="button">Upload</button>
            </span>
        </div>
    </div>

    <!-- Brand Field -->
    <div class="form-group">
        <label for="id_brand">Brand</label>
        <select name="brand" class="form-control" id="id_brand">
            <option value="">Select Brand</option>
            {% for brand in brands %}
                <option value="{{ brand.id }}" {% if product.brand_id == brand.id %}selected{% endif %}>
                    {{ brand.name }}
                </option>
            {% endfor %}
        </select>
    </div>

    <!-- Category Field -->
    <div class="form-group">
        <label for="id_categories">Category</label>
        <select name="categories" class="form-control" id="id_categories">
            <option value="">Select Category</option>
            {% for category in all_categories %}
                <option value="{{ category.id }}" {% if product.categories_id == category.id %}selected{% endif %}>
                    {{ category.name }}
                </option>
            {% endfor %}
        </select>
    </div>

    <button type="submit" class="btn btn-success">Save Changes</button>
</form>



<div class="form-group">
    <label for="id_filter_price">Filter Price</label>
    <select name="filter_price" class="form-control" id="id_filter_price">
        <option value="">Select Filter Price</option>
        {% for f_price in filter_price %}
            <option value="{{ f_price.id }}" {% if product.filter_price_id == f_price.id %}selected{% endif %}>
                {{ f_price.price }}
            </option>
        {% endfor %}
    </select>
</div>




SING===UP FORM 
import re
from django.contrib import messages
from django.shortcuts import render, redirect
from django.contrib.auth.models import User

def sign_up(request):
    if request.method == 'POST':
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        username = request.POST.get('username')
        email = request.POST.get('email')
        password1 = request.POST.get('password1')
        password2 = request.POST.get('password2')

        if not first_name or not last_name or not username or not email or not password1 or not password2:
            messages.error(request, "Please fill in all the required fields.")
            return redirect('sign_up')

        if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            messages.error(request, "Please enter a valid email address.")
            return redirect('sign_up')

        if User.objects.filter(username=username).exists():
            messages.error(request, "Username is already taken. Please choose another one.")
            return redirect('sign_up')

        if User.objects.filter(email=email).exists():
            messages.error(request, "Email address is already registered. Please use a different email.")
            return redirect('sign_up')

        if password1 != password2:
            messages.error(request, "Passwords do not match. Please enter the same password in both fields.")
            return redirect('sign_up')

        if len(password1) < 8:
            messages.error(request, "Password must be at least 8 characters long.")
            return redirect('sign_up')

        if not re.match(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$', password1):
            messages.error(request, "Password must contain at least one lowercase letter, one uppercase letter, one digit, and one special character.")
            return redirect('sign_up')

        # Add any additional custom validation rules using regex or other criteria here

        # If all validation checks pass, proceed with user registration
        user = User.objects.create_user(username=username, email=email, password=password1, first_name=first_name, last_name=last_name)
        user.save()
        request.session['email'] = email
        send_otp(request)
        return render(request, 'user/otp.html', {'email': email})

    return render(request, 'user/sign_up.html')



RESEND OTP +++++++++++++
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Login</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- MATERIAL DESIGN ICONIC FONT -->
    <link rel="stylesheet" href="{% static 'signup/fonts/material-design-iconic-font/css/material-design-iconic-font.min.css' %}">

    <!-- STYLE CSS -->
    <link rel="stylesheet" href="{% static 'signup/css/style.css' %}">
</head>
<body>

<div class="wrapper" style="background-image: url('{% static '/signup/images/bg-registration-form-1.jpeg' %}');">
    <div class="inner">
        <div class="image-holder">
            <img src="{% static 'signup/images/reg-form-1.jpeg' %}" alt="">
        </div>
        <form action="{% url 'otp_verification'%}" method="POST">
            {% csrf_token %}
            <h3>OTP verification</h3>
            <p style="margin-top: 50px;">Please check your email:</p>
            <p style="font-size: 18px;">{{email}}</p>

            <div class="form-wrapper">
                <h4 style="margin-top: 70px;">Enter your one-time OTP</h4>
            </div>

            <div class="form-wrapper">
                <input type="password" name="otp" class="form-control" required>
                <i class="zmdi zmdi-lock"></i>
            </div>
            <div id="countdown" style="margin-top: 10px;"></div>

            <button type="submit">Verify <i class="zmdi zmdi-arrow-right"></i></button>

            <!-- Resend OTP button -->
            <form action="{% url 'resend_otp' %}" method="POST">
                {% csrf_token %}
                <button type="submit" id="resendButton" style="display: none;">Resend OTP</button>
            </form>

            {% for message in messages %}
            <p style="color: rgb(212, 4, 4);">{{message}}</p>
            {% endfor %}
        </form>
    </div>
</div>

<script>
    // Set the countdown duration (in seconds)
    var countdownDuration = 60; // 60 seconds for one minute

    var countdown = document.getElementById("countdown");
    var resendButton = document.getElementById("resendButton");

    function updateCountdown() {
        countdownDuration--;
        if (countdownDuration <= 0) {
            countdown.textContent = "Time's up!";
            resendButton.style.display = "block"; // Show the "Resend OTP" button
        } else {
            var minutes = Math.floor(countdownDuration / 60);
            var seconds = countdownDuration % 60;
            countdown.textContent = "Time remaining: " + minutes + "m " + seconds + "s";
            setTimeout(updateCountdown, 1000); // Update every second
        }
    }

    updateCountdown();

    resendButton.addEventListener("click", function () {
        // Handle the logic to resend the OTP here
        // You can reset the timer and hide the button if needed
        countdownDuration = 60;
        resendButton.style display = "none";
        updateCountdown();
    });
</script>

</body>
</html>


==================================================================
if request.method == 'POST' :
        coupon = request.POST.get('coupon')
        coupon_obj = Coupon.objects.filter(coupon_code__icontains = coupon)
        if not coupon_obj.exists() :
            messages.warning(request, 'Invalid Coupon')
            return redirect('view_cart')
        if cart.coupon :
            messages.warning(request, 'Coupon Already exists!')
            return redirect('view_cart')
        cart.coupon = coupon_obj[0]
        cart.coupon.save()
        messages.success(request, "Coupon Applied")
        return redirect('view_cart')


        ====================RAZOR PAY ===============
        
 $(document).ready(function(){
    $('.payWithRazorpay').click(function (e){
        e.preventDefault();

        // Collect form data
        var formData = {
            fname: $("[name='fname']").val(),
            lname: $("[name='lname']").val(),
            country: $("[name='country']").val(),
            address: $("[name='address']").val(),
            city: $("[name='city']").val(),
            state: $("[name='state']").val(),
            pincode: $("[name='pincode']").val(),
            phone: $("[name='phone']").val(),
            email: $("[name='email']").val()
        };

        // Validate form data
        for (var key in formData) {
            if (formData[key] === "") {
                alert("All fields are mandatory");
                return false;
            }
        }

        // Prepare Razorpay options
        var options = {
            key: "YOUR_RAZORPAY_API_KEY", // Replace with your actual API key
            amount: 50000, // Replace with the actual amount in paise
            currency: "INR",
            name: "FurniCube Pvt.Ltd",
            description: "Test Transaction",
            image: "/user/images/icons/logo.png",
            handler: function (response) {
                // Handle the response from Razorpay
                verifyPayment(response); // You need to implement this function
            },
            prefill: {
                name: "FurniCube Pvt.Ltd",
                email: "furnicube007store@example.com",
                contact: "910000000369"
            },
            notes: {
                address: "Razorpay Corporate Office"
            },
            theme: {
                color: "#c96"
            }
        };

        // Create a new Razorpay instance
        var rzp = new Razorpay(options);

        // Open the Razorpay Checkout form
        rzp.open();
    });
});

////////////////////////////////////////////USER ACCCOUNT

# @login_required(login_url='log_in')
# def account_details(request) :
#     # account_details = User.objects.get(id=request.user.id)
#     account_details = request.user
#     context ={'account_datails':account_details}
#     return render(request, 'user_account/account_details.html',context)


# def update_account_details(request, user_id) :
#     user = request.user
#     if request.method == 'POST' :
#         first_name = request.POST.get('first_name')
#         last_name = request.POST.get('last_name')
#         username = request.POST.get('username')
#         email = request.POST.get('email')
#         password = request.POST.get('password')

        
#         user.first_name = first_name
#         user.last_name = last_name
#         user.username = username
#         user.email = email
#         if password:
#             user.set_password(password) 
#         user.save()
#         print('puthila allll nnddddd ')
#         return redirect('account_details')
        

#     return render(request, 'user_account/account_details.html')

# @login_required(login_url='log_in')
# def update_account_details(request):
#     user = request.user
    
#     if request.method == 'POST':
#         first_name = request.POST.get('first_name')
#         last_name = request.POST.get('last_name')
#         username = request.POST.get('username')
#         email = request.POST.get('email')
#         password = request.POST.get('password')

#         # Update the user's fields
#         user.first_name = first_name
#         user.last_name = last_name
#         user.username = username
#         user.email = email

#         if password:
#             user.set_password(password)

#         user.save()

#         return redirect('account_details')
    
#     return render(request, 'user_account/account_details.html')



# @login_required(login_url='log_in')
# def account_details(request):
#     user = request.user
#     user_form = UserUpdateForm(instance=user)
#     password_form = ChangePasswordForm()

#     if request.method == 'POST':
#         if 'update_info' in request.POST:
#             user_form = UserUpdateForm(request.POST, instance=user)
#             if user_form.is_valid():
#                 user_form.save()
#                 messages.success(request, 'User information updated successfully.')
#                 return redirect('account_details')

#         if 'change_password' in request.POST:
#             password_form = ChangePasswordForm(request.POST)
#             if password_form.is_valid():
#                 current_password = password_form.cleaned_data['current_password']
#                 new_password = password_form.cleaned_data['new_password']

#                 if user.check_password(current_password):
#                     user.set_password(new_password)
#                     user.save()
#                     messages.success(request, 'Password updated successfully.')
#                     return redirect('account_details')
#                 else:
#                     messages.error(request, 'Current password is incorrect.')

#     context = {
#         'user_form': user_form,
#         'password_form': password_form,
#     }
#     return render(request, 'user_account/account_details.html', context)



# @login_required(login_url='log_in')
# def account_details(request):
#     user = request.user
#     user_form = UserUpdateForm(instance=user)
#     password_form = ChangePasswordForm()
#     password_updated = False

#     if request.method == 'POST':
#         if 'update_info' in request.POST:
#             user_form = UserUpdateForm(request.POST, instance=user)
#             if user_form.is_valid():
#                 user_form.save()
#                 messages.success(request, 'User information updated successfully')
#                 return redirect('account_details')

#         if 'change_password' in request.POST:
#             password_form = ChangePasswordForm(request.POST)
#             if password_form.is_valid():
#                 current_password = password_form.cleaned_data['current_password']
#                 new_password = password_form.cleaned_data['new_password']

#                 if user.check_password(current_password):
#                     user.set_password(new_password)
#                     user.save()
#                     password_updated = True
#                     messages.success(request, 'Password updated successfully')
#                 else:
#                     messages.error(request, 'Current password is incorrect')

#     context = {
#         'user_form': user_form,
#         'password_form': password_form,
#         'password_updated': password_updated,  # Pass the flag to the template
#     }
#     return render(request, 'user_account/account_details.html', context)


/////////////   PAGINATION EXEXPIIITONS 
 try:
        products = paginator.page(page)
    except PageNotAnInteger:
        # If the page parameter is not an integer, show the first page
        products = paginator.page(1)
    except EmptyPage:
        # If the page is out of range (e.g., 9999), deliver the last page of results
        products = paginator.page(paginator.num_pages)

    return render(request, 'your_template.html', {'products': products})


    ================== SHIPPING 
     <tr class="summary-shipping-row">
                                        <td>
                                            <div class="custom-control custom-radio">
                                                {% comment %} <input type="radio" id="free-shipping" name="shipping" class="custom-control-input"> {% endcomment %}
                                                <input type="radio" id="free-shipping" name="shipping" class="custom-control-input" checked>
                                                <label class="custom-control-label" for="free-shipping">Free Shipping</label>
                                            </div><!-- End .custom-control -->
                                        </td>
                                        <td>$0.00</td>
                                    </tr><!-- End .summary-shipping-row -->

                                    <tr class="summary-shipping-row">
                                        <td>
                                            <div class="custom-control custom-radio">
                                                {% comment %} <input type="radio" id="standart-shipping" name="shipping" class="custom-control-input"> {% endcomment %}
                                                <input type="radio" id="standart-shipping" name="shipping" class="custom-control-input">

                                                <label class="custom-control-label" for="standart-shipping">Standart:</label>
                                            </div><!-- End .custom-control -->
                                        </td>
                                        <td>$10.00</td>
                                    </tr><!-- End .summary-shipping-row -->

                                    <tr class="summary-shipping-row">
                                        <td>
                                            <div class="custom-control custom-radio">
                                                {% comment %} <input type="radio" id="express-shipping" name="shipping" class="custom-control-input"> {% endcomment %}
                                                <input type="radio" id="express-shipping" name="shipping" class="custom-control-input">

                                                <label class="custom-control-label" for="express-shipping">Express:</label>
                                            </div><!-- End .custom-control -->
                                        </td>
                                        <td>$20.00</td>
                                    </tr><!-- End .summary-shipping-row -->


=============== form error alert 
 {% if form.errors %}
      <div class="alert alert-danger">
          {{ form.errors }}
      </div>
  {% endif %}

  sweertalert ============ <script>
    {% if messages %}
        {% for message in messages %}
            Swal.fire({
                icon: "{% if message.tags == 'success' %}success{% elif message.tags == 'error' %}error{% elif message.tags == 'warning' %}warning{% elif message.tags == 'info' %}info{% endif %}",
                title: "{{ message.tags }}",
                text: "{{ message }}",
            });
        {% endfor %}
    {% endif %}
</script>


 monthly_sales_data = Order.objects.filter(status='Deliverd', created_at__gte=start_of_month).values('created_at__month').annotate(total_sales=Count('id'))

    # Get yearly sales data
    
    
    yearly_sales_data = Order.objects.filter(status='Deliverd', created_at__year=today.year).values('created_at__year').annotate(total_sales=Count('id'))
# @login_required(login_url='log_in')
# def cancel_order(request, t_no):
#     try:
#         # Get the order
#         order_item = get_object_or_404(Order, tracking_no=t_no)
#         user_wallet, created = Wallet.objects.get_or_create(user=request.user, defaults={'wallet': 0})
#         order_items = OrderItem.objects.filter(order=order_item)
        
#         for item in order_items:
#             product = item.product
#             variant = Variants.objects.filter(product=product).first()
#             if variant:
#                 variant.quantity += item.quantity
#                 variant.save()
        
#         if order_item.payment_mode == 'paid by razorpay' or order_item.payment_mode == 'paid by wallet':
#             user_wallet.wallet += order_item.total_price
#             user_wallet.save()
#         order_item.delete()
        
#         return HttpResponseRedirect(reverse('user_orders'))
#     except Order.DoesNotExist:
#         return HttpResponse("Order not found.", status=404)
#     except Exception as e:
#         return HttpResponse(f"An error occurred: {str(e)}", status=500)   
# ==============ORI GINAMA LAJDLFJLJFK======================= 
# def cancel_order(request, t_no):
#     try:
#         # Get the order
#         order_item = get_object_or_404(Order, tracking_no=t_no)

#         # Ensure user has a wallet
#         user_wallet, created = Wallet.objects.get_or_create(user=request.user, defaults={'wallet': 0})
        
#         if user_wallet is None:
#             raise Exception("User wallet not found or could not be created.")

#         order_items = OrderItem.objects.filter(order=order_item)

#         for item in order_items:
#             product = item.product
#             variant = Variants.objects.filter(product=product).first()
#             if variant:
#                 variant.quantity += item.quantity
#                 variant.save()

#         if order_item.payment_mode == 'paid by razorpay' or order_item.payment_mode == 'paid by wallet':
#             if user_wallet.wallet is None:
#                 user_wallet.wallet = 0  # Set wallet to 0 if it is None
#             user_wallet.wallet += order_item.total_price
#             user_wallet.save()
#         order_item.delete()

#         return HttpResponseRedirect(reverse('user_orders'))
#     except Order.DoesNotExist:
#         return HttpResponse("Order not found.", status=404)
#     except Exception as e:
#         return HttpResponse(f"An error occurred: {str(e)}", status=500)
    
    # ==========================================